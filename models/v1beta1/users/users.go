// Package v1beta1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1beta1

import (
	"database/sql"

	"github.com/gobuffalo/pop/slices"
	"github.com/gofrs/uuid"
	"github.com/lib/pq"
	externalRef1 "github.com/meshery/schemas/models/core"
)

// BulkDelete defines model for bulkDelete.
type BulkDelete struct {
	UserEmails externalRef1.Emails `json:"user_emails"`
	UserIds    externalRef1.Id     `json:"user_ids"`
}

// OrganizationWithUserRoles defines model for organization_with_user_roles.
type OrganizationWithUserRoles struct {
	ID externalRef1.GeneralId `db:"id" json:"id"`

	// CreatedAt Timestamp when the resource was created.
	CreatedAt   externalRef1.CreatedAt `db:"created_at" json:"created_at,omitempty" yaml:"created_at"`
	DeletedAt   sql.NullTime           `db:"deleted_at" json:"deleted_at"`
	Description externalRef1.Text      `json:"description,omitempty"`
	Name        externalRef1.Text      `json:"name,omitempty"`
	Owner       uuid.UUID              `db:"owner" json:"owner"`
	RolesNames  pq.StringArray         `db:"roles_names" json:"roles_names"`

	// UpdatedAt Timestamp when the resource was updated.
	UpdatedAt externalRef1.UpdatedAt `db:"updated_at" json:"updated_at,omitempty" yaml:"updated_at"`
}

// OrganizationsWithCount defines model for organizations_with_count.
type OrganizationsWithCount struct {
	OrganizationWithUserRoles []OrganizationWithUserRoles `json:"organizationWithUserRoles,omitempty"`
	TotalCount                externalRef1.Number         `json:"total_count,omitempty"`
}

// TeamWithUserRoles defines model for team_with_user_roles.
type TeamWithUserRoles struct {
	ID externalRef1.GeneralId `db:"id" json:"id"`

	// CreatedAt Timestamp when the resource was created.
	CreatedAt   externalRef1.CreatedAt `db:"created_at" json:"created_at,omitempty" yaml:"created_at"`
	DeletedAt   sql.NullTime           `db:"deleted_at" json:"deleted_at"`
	Description externalRef1.Text      `json:"description,omitempty"`
	Metadata    slices.Map             `db:"metadata" json:"metadata"`
	Name        externalRef1.Text      `json:"name,omitempty"`
	Owner       uuid.UUID              `db:"owner" json:"owner"`
	RolesNames  pq.StringArray         `db:"roles_names" json:"roles_names"`

	// UpdatedAt Timestamp when the resource was updated.
	UpdatedAt externalRef1.UpdatedAt `db:"updated_at" json:"updated_at,omitempty" yaml:"updated_at"`
}

// TeamsWithCount defines model for teams_with_count.
type TeamsWithCount struct {
	TeamWithRoles []TeamWithUserRoles `json:"teamWithRoles,omitempty"`
	TotalCount    externalRef1.Number `json:"total_count,omitempty"`
}

// User defines model for user.
type User struct {
	ID              externalRef1.GeneralId `db:"id" json:"id"`
	AcceptedTermsAt externalRef1.Time      `json:"accepted_terms_at,omitempty"`
	AccessToken     string                 `json:"accessToken,omitempty"`

	// AvatarUrl Link for profile picture
	AvatarUrl externalRef1.AvatarUrl `json:"avatar_url,omitempty"`
	Bio       externalRef1.Bio       `json:"bio,omitempty"`
	Country   slices.Map             `db:"country" json:"country"`

	// CreatedAt Timestamp when the resource was created.
	CreatedAt externalRef1.CreatedAt `db:"created_at" json:"created_at" yaml:"created_at"`
	DeletedAt sql.NullTime           `db:"deleted_at" json:"deleted_at"`

	// Email email
	Email          externalRef1.Email      `json:"email"`
	FirstLoginTime externalRef1.Time       `json:"first_login_time,omitempty"`
	FirstName      externalRef1.Text       `json:"first_name"`
	LastLoginTime  externalRef1.Time       `json:"last_login_time"`
	LastName       externalRef1.Text       `json:"last_name"`
	Organizations  *OrganizationsWithCount `json:"organizations,omitempty"`
	Preferences    externalRef1.MapObject  `json:"preferences,omitempty"`

	// Provider One of (x-oapi-codegen-extra-tags-cloud, github, google)
	Provider     externalRef1.Provider  `db:"provider" json:"provider"`
	RefreshToken string                 `json:"refreshToken,omitempty"`
	Region       slices.Map             `db:"region" json:"region"`
	RoleNames    externalRef1.RoleNames `json:"roleNames,omitempty"`
	Status       externalRef1.Status    `json:"status"`
	Teams        *TeamsWithCount        `json:"teams,omitempty"`

	// UpdatedAt Timestamp when the resource was updated.
	UpdatedAt externalRef1.UpdatedAt `db:"updated_at" json:"updated_at" yaml:"updated_at"`

	// UserId user's email or username
	UserId externalRef1.UserId `db:"user_id" json:"user_id"`
}

// UserInvite defines model for userInvite.
type UserInvite struct {
	// Email email
	Email     externalRef1.Email `json:"email"`
	FirstName externalRef1.Text  `json:"first_name"`
	LastName  externalRef1.Text  `json:"last_name"`
}
